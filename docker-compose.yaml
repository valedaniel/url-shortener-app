services:
  app:
    container_name: url-shortener-app
    build:
      context: ./
      dockerfile: dockerfile
    ports:
      - '${PORT}:${PORT}'
    entrypoint: ['sh', '-c', 'yarn migrate && yarn start:prod']
    working_dir: /app
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_DIALECT=${DATABASE_DIALECT}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - API_VERSION=${API_VERSION}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network

  db:
    image: postgres:16
    container_name: postgres_service
    environment:
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    ports:
      - '${DATABASE_PORT}:${DATABASE_PORT}'
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USERNAME}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.2
    container_name: redis_service
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
